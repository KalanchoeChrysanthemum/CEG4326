package main

import (
	"bufio"
	"crypto/hmac"
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/tarm/serial"
	"gocv.io/x/gocv"
	db "ic-hardware/database"
	"ic-hardware/vision"
)

// CONSTANTS
const key = "0e6670a2bee3b4b7f25d64d66582a776"
const inputPath = "pictures/captured.jpg"
const outputPath = "pictures/output.jpg"

/*
*
computeHMAC - Calculates and returns a 16-byte HMAC hash of the providedinput

message []byte - The message to be hashed
*/
func computeHMAC(message []byte) []byte {
	h := hmac.New(sha256.New, []byte(key))
	h.Write(message)
	hash := h.Sum(nil)
	return hash[:16]
}

/*
*
verifyHMAC - Verifies the hash of a given message matches the supplied hash

message []byte - The message to be hashed and verified

messageMAC - The expected hash being verified against
*/
func verifyHMAC(message, messageMAC []byte) bool {
	expectedMAC := computeHMAC(message)
	return hmac.Equal(messageMAC, expectedMAC)
}

/*
*
 */
func VerifyUser(widHex string, hashHex string) (bool, error) {
	widBytes, err := hex.DecodeString(widHex)
	if err != nil {
		return false, fmt.Errorf("Invalid WID hex: %w", err)
	}

	hashBytes, err := hex.DecodeString(hashHex)
	if err != nil {
		return false, fmt.Errorf("Invalid HASH hex: %w", err)
	}

	if !verifyHMAC(widBytes, hashBytes) {
		return false, nil
	}

	var wid [16]byte
	copy(wid[:], widBytes)

	user, err := db.QueryUser(wid)
	if err != nil {
		return false, fmt.Errorf("User not found: %w", err)
	}

	if !hmac.Equal(user.HASH[:16], hashBytes) {
		return false, nil
	}

	return true, nil
}

func VerifyBinary(widHex, binary string) (bool, error) {
    widBytes := hex.DecodeString(widHex)
    if err != nil {
	return false, fmt.Errorf("Invalid WID hex: %w", err)
    }

    var wid [16]byte
    copy(wid[:], widBytes)

    user, err := db.QueryUser(wid)
    if err != nil {
	return false, fmt.Errorf("User not found: %w", err)
    }

    if (user.BINARY == binary) {
	return true, nil
    }

    return false,  fmt.Errorf("Binary values did not match")
}

func process(wid, hash string) (bool, error) {
	valid, err := VerifyUser(wid, hash)

	if valid {
		return true, nil
	} else {
		return false, err
	}
}

func main() {
	defer db.DB.Close()

	// Open raspberry pi camera
	webcam, err := gocv.OpenVideoCapture(0)
	if err != nil {
		log.Fatalf("[ERROR] Failed to start camera: %v", err)
	}
	defer webcam.Close()

	// Give time buffer to allow camera to fully open
	time.Sleep(2 * time.Second)

	// Config for serial port
	config := &serial.Config{
		Name:     "/dev/ttyACM0",
		Baud:     9600,
		Size:     8,
		StopBits: serial.Stop1,
		Parity:   serial.ParityNone,
	}

	port, err := serial.OpenPort(config)
	if err != nil {
		log.Fatal("[ERROR] Failed to open serial port: %v", err)
	}

	defer port.Close()

	// Open buffered reader for serial communication
	reader := bufio.NewReader(port)

	/**
	  Main logic loop

	  Continuously wait for Arduino to send WID,HASH pairs
	  to validate

	  Once recieved, extract the values, validate the hash, process LEDs
	*/
	for {
		message, err := reader.ReadString('\n')
		if err != nil {
			log.Println("[ERROR] Failed to read message: %v", err)
		}

		// Split message into 'parts' to separate wid and hash
		parts := strings.Split(strings.TrimSpace(message), ",")
		if len(parts) != 2 {
			log.Println("[ERROR] Invalid message format")
			continue
		}

		wid := parts[0]
		hash := parts[1]

		// Print recieved WID and hash for debugging purposes
		fmt.Println("=========================")
		fmt.Println("WID:", wid)
		fmt.Println("Hash:", hash)

		// Validate hash is valid before capturing and processing an image
		valid, err := process(wid, hash)
		if err != nil {
			fmt.Println("[INVALID USER] %v", err)
		} else {
			// Initialize image
			img := gocv.NewMat()
			defer img.Close()

			// Take picture
			if ok := webcam.Read(&img); !ok {
			    log.Println("[ERROR] Failed to capture image from camera: %v", err)
			}

			if img.Empty() {
			    log.Println("[ERROR] Captured image is empty: %v", err)
			}

			if ok := gocv.IMWrite(inputPath, img); !ok {
			    log.Println("[ERROR] Failed to write captured image: %v", err)
			}

			binary, err := vision.ProcessImage(inputPath, outputPath)
			if err != nil {
			    log.Println("[ERROR] Failed to extract binary from captured image: %v", err)
			}

			fmt.Println("Binary:")
			fmt.Println(binary)

			success, err := VerifyBinary(wid, binary)
			if err != nil {
			    fmt.Println("[INVALID USER] %v", err)
			} else {
			    fmt.Println("[VALID USER]")
			}
		}

		fmt.Println("=========================")
	}
}
